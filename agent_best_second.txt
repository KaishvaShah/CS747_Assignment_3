import os
import sys
import random 
import json
import math
import utils
import time
import config
import numpy as np
seed = 73
random.seed(seed)

class Agent:
    def __init__(self, table_config) -> None:
        self.table_config = table_config
        self.prev_action = None
        self.curr_iter = 0
        self.state_dict = {}
        self.holes = []
        self.ns = utils.NextState()

    def set_holes(self, holes_x, holes_y, radius):
        for x in holes_x:
            for y in holes_y:
                self.holes.append((x[0], y[0]))
        self.ball_radius = radius

    def is_visible(self, white_ball_pos, hole_pos, ball_pos):
        # Calculate vectors from the white ball to the hole and from the ball to the hole
        vector_to_hole = np.array(ball_pos) - np.array(white_ball_pos)
        vector_to_ball = np.array(hole_pos) - np.array(ball_pos)

        # Calculate the dot product
        dot_product = np.dot(vector_to_hole, vector_to_ball) / (np.linalg.norm(vector_to_hole) * np.linalg.norm(vector_to_ball))

        print(f"The confidence factor is {dot_product}")
        # If the dot product is greater than or equal to 0, the hole is visible
        return dot_product

    def get_visible_holes(self, white_ball_pos, hole_positions, ball_pos):
        visible_holes = []

        for hole_pos in hole_positions:
            confidence = self.is_visible(white_ball_pos, hole_pos, ball_pos)
            if confidence >= 0:
                visible_holes.append(hole_pos)

        return visible_holes

    def ball_white_closest(self, ball_pos, white_ball_pos, available_holes):
        closest_ball = None
        closest_distance = float('inf')
        potting_hole = None

        for ball_label, ball_position in ball_pos.items():
            # Calculate the distance between the white ball and the current ball
            distance = np.sqrt((ball_position[0] - white_ball_pos[0])**2 + (ball_position[1] - white_ball_pos[1])**2)

            # Check if the current ball is the closest one so far
            if distance < closest_distance:
                closest_ball = ball_label
                closest_distance = distance

                # Find the nearest available hole for potting
                nearest_hole = self.find_nearest_hole(ball_position, available_holes)

                if nearest_hole is not None:
                    potting_hole = nearest_hole

                    # Check if the potting hole is in the list of visible holes
                    possible_holes = self.get_visible_holes(white_ball_pos, available_holes, ball_position)
                    if potting_hole in possible_holes:
                        return ball_label, potting_hole

        return None, None

    def find_nearest_hole(self, ball_position, available_holes):
        nearest_hole = None
        min_distance = float('inf')

        for hole in available_holes:
            distance = np.sqrt((ball_position[0] - hole[0])**2 + (ball_position[1] - hole[1])**2)

            if distance < min_distance:
                min_distance = distance
                nearest_hole = hole

        return nearest_hole

    def ball_hole_closest(self, ball, holes):
        distance = float('inf')
        best_hole = None  # Initialize best_hole to None
        for index, hole in enumerate(holes):
            current_distance = (hole[0] - ball[0])**2 + (hole[1] - ball[1])**2
            if current_distance < distance:
                distance = current_distance
                best_hole = index
            # print(f"Index {index} hole {hole} Distance {distance}")
        return int(best_hole), distance

    
    # def angle_vector(self, a, b):
        
    #     if(b[1] > a[1]):
    #         if(b[0] > a[0]):
    #             theta1 = np.arctan((b[1] - a[1])/(b[0] - a[0]))
    #         elif(b[0] == a[0]):
    #             theta1 = math.pi/2
    #         else:
    #             theta1 = math.pi + np.arctan((b[1] - a[1])/(b[0] - a[0]))
    #     else:
    #         if(b[0] > a[0]):
    #             theta1 = np.arctan((b[1] - a[1])/(b[0] - a[0]))
    #         elif(b[0] == a[0]):
    #             theta1 = -1*math.pi/2
    #         else:
    #             theta1 = -1*math.pi + np.arctan((b[1] - a[1])/(b[0] - a[0]))

    #     # theta1 = np.arctan((b[1] - a[1])/(b[0] - a[0]))
    #     theta = -1*(math.pi/2 + theta1)
    #     if(-3*math.pi/2 <= theta <= -1*math.pi):
    #         return theta + 2*math.pi
    #     return theta
    
    def angle_vector(self, a, b):
        
        if(b[0] > a[0]):
            theta1 = np.arctan((b[1] - a[1])/(b[0] - a[0]))
            theta = -1*(math.pi/2 + theta1)
        elif(b[0] == a[0]):
            if(b[1] >= a[1]):
                theta1 = math.pi/2
                theta = -1*(math.pi/2 + theta1)
            else:
                theta1 = -1*math.pi/2
                theta = -1*(math.pi/2 + theta1)
        else:
            theta1 = np.arctan((b[1] - a[1])/(b[0] - a[0]))
            theta = -1*(-1*math.pi/2 + theta1)

        return theta

    def line_joining(self, point, theta, mag):
        result = np.zeros(2)
        result[0] = point[0] - mag*math.sin(theta)
        result[1] = point[1] - mag*math.cos(theta)
        return result
    
    def decide_white_shooting_direction(self, white_ball_pos, ball_pos, hole_pos):
        theta = self.angle_vector(hole_pos, ball_pos)
        # print(theta*180/math.pi)
        point_of_contact = self.line_joining(ball_pos, theta, 2*self.ball_radius)
        # point_of_contact = ball_pos
        print(180*self.angle_vector( white_ball_pos, point_of_contact)/math.pi)
        return self.angle_vector( white_ball_pos, point_of_contact)

    def decide_force(self, white_ball_pos, ball_pos, hole_pos, confidence, straight_shot):
        theta = self.angle_vector(hole_pos, ball_pos)
        # print(theta*180/math.pi)
        point_of_contact = self.line_joining(ball_pos, theta, 2*self.ball_radius)
        # print(180*self.angle_vector( white_ball_pos, point_of_contact)/math.pi)
        direction_of_white_ball = self.angle_vector(white_ball_pos, point_of_contact)   
        # return 1/abs(np.cos(direction_of_white_ball - theta))
        # return 0.3
        distance_white_color =  np.sqrt((white_ball_pos[0] - ball_pos[0])**2 + (white_ball_pos[1] - ball_pos[1])**2)
        distance_white_color /= np.sqrt(960**2 + 460**2)
        print(f"Distance white color {distance_white_color}")
        # force = distance_white_color
        if(straight_shot):
            return 0.2*distance_white_color + confidence*0.5
        return 0.2*distance_white_color + confidence*0.5
        # return 0.1*distance_white_color + confidence*0.5
        # return 0.4 + confidence*0.3
    # def decide_force(self, white_ball_pos, ball_pos, hole_pos):
    #     theta = self.angle_vector(hole_pos, ball_pos)
    #     point_of_contact = self.line_joining(ball_pos, theta, 2*self.ball_radius)
    #     direction_of_white_ball = self.angle_vector(white_ball_pos, point_of_contact)

    #     # Calculate the vectors (white_ball, ball) and (ball, hole)
    #     vector_white_to_ball = np.array(ball_pos) - np.array(white_ball_pos)
    #     vector_ball_to_hole = np.array(hole_pos) - np.array(ball_pos)

    #     # Calculate the dot product between the vectors
    #     dot_product = np.dot(vector_white_to_ball, vector_ball_to_hole)

    #     # Define a confidence factor based on the dot product
    #     confidence_factor = abs(dot_product) / (np.linalg.norm(vector_white_to_ball) * np.linalg.norm(vector_ball_to_hole))
        
    #     # You can adjust the weight and scaling factor as needed
    #     weight = 0.1  # Adjust the weight
    #     scaling_factor = 2.0  # Adjust the scaling factor

    #     # Calculate the force based on the confidence factor
    #     force = 0.2 + confidence_factor * weight * scaling_factor

    #     return force

    def decide_force_hard(self, direction, white_ball_pos, ball_pos_dict, hole_pos, ball_pos, confidence):
        # Define a range of force values to test
        force_range = np.linspace(0, 1.0, 20)  # Adjust the range as needed
        for force in force_range:
            # Simulate a shot with the current force
            action = (direction/math.pi, force)
            # print(ball_pos)
            next_state = self.ns.get_next_state(ball_pos_dict, action, seed)  # Adjust seed as needed

            # Check if the ball has been potted in the next state
            if self.ball_potted(next_state, ball_pos_dict):
                print("Used next state strategy")
                return force  # Return the force that results in potting the ball

        # If no force results in potting, return a default value
        return self.decide_force(white_ball_pos, ball_pos, hole_pos, confidence)  # You can choose a default force value

    def ball_potted(self, next_state, ball_pos):
        # Check if the number of color balls (excluding white and label 0) in the next state is one less than the current state
        current_num_color_balls = sum(1 for label in ball_pos if label != 'white' and label != 0)
        next_num_color_balls = sum(1 for label in next_state if label != 'white' and label != 0)
        return current_num_color_balls - next_num_color_balls >= 1


    def decide_force_smart(self, direction, white_ball_pos, ball_pos_dict, hole_pos, ball_pos, ball_label, confidence, straight_shot):
        # Define a range of force values to test
        initial_force_range = np.linspace(0, 1.0, 20)

        for initial_force in initial_force_range:
            force = self.optimize_force(white_ball_pos, ball_pos, hole_pos, initial_force, direction, ball_pos_dict, ball_label ,seed)
            if force is not None:
                return force

        # If no force results in potting, return a default value
        return self.decide_force(white_ball_pos, ball_pos, hole_pos, confidence, straight_shot)

    def optimize_force(self, white_ball_pos, ball_pos, hole_pos, initial_force, direction, ball_pos_dict, ball_label, seed):
        max_iterations = 10
        force = initial_force
        previous_shot_success = False
        previous_state = ball_pos_dict
        for _ in range(max_iterations):
            action = (direction/math.pi, force)
            print(ball_pos_dict)
            next_state = self.ns.get_next_state(ball_pos_dict, action, seed)
            print(next_state)
            print(previous_state)
            if self.ball_potted(next_state, ball_pos_dict):
                print(f"Returning from optimisation with positive results and force {force}")
                return force  # Return the force that results in potting the ball

            # If the shot didn't pot the ball, adjust the force for the next iteration
            if previous_shot_success:
                force += 0.02  # Increase force for fine-tuning
            else:
                force += 0.005  # Smaller step size when not making progress

            previous_shot_success = False
            # Check if the shot is closer to potting than the previous one

            if self.distance(next_state[ball_label], hole_pos) < self.distance(previous_state[ball_label], hole_pos):
                previous_shot_success = True

            previous_state = next_state

        return None  # No force value resulted in potting the ball

    def distance(self, point1, point2):
        return math.sqrt((point2[1] - point1[1])**2 + (point2[0] - point1[0])**2)

    def is_line_segment_intersection(self, point1, point2, obstacle, radius):
        # A = point1[1] - point2[1]
        A = point2[1] - point1[1]
        B = (point2[0] - point1[0])*-1
        C = (point1[0]*point2[1] - point2[0]*point1[1])*-1
        # C = 2*point2[1]*

        d = abs(A*obstacle[0] + B*obstacle[1] + C) / (A**2 + B**2)**0.5
        
        print("Perpendicular distance captured ", d)

        return d <= radius

    def is_obstructed(self, pointa, pointb, obstacles, ball_radius):
        for obstacle in obstacles:
            if(pointb == obstacle or pointa == obstacle):
                continue
            if self.is_line_segment_intersection(pointa, pointb, obstacle, ball_radius):
                # Check if the obstacle is within the bounding box of the line segment
                min_x = min(pointa[0], pointb[0])
                max_x = max(pointa[0], pointb[0])
                min_y = min(pointa[1], pointb[1])
                max_y = max(pointa[1], pointb[1])

                if min_x <= obstacle[0] <= max_x and min_y <= obstacle[1] <= max_y:
                    return True
        return False


    def select_best_shot(self, ball_positions,white_ball_pos, hole_locations, ball_radius):
        # ball_positions.pop(0, None)
        # white_ball_pos = ball_positions.pop("white", None)
        # self.ball_white_closest(ball_positions, white_ball_pos, hole_locations)
        best_pair = self.ball_white_closest(ball_positions, white_ball_pos, hole_locations)
        best_score = -1
        straight_shot = 0
        for ball_label, ball_pos in ball_positions.items():
            for hole_pos in hole_locations:
                is_obstructed_white = self.is_obstructed(white_ball_pos, ball_pos, ball_positions.values(), ball_radius)
                is_obstructed_hole = self.is_obstructed(ball_pos, hole_pos, ball_positions.values(), ball_radius)
                print(is_obstructed_hole)
                print(is_obstructed_white)
                minimal_condition = 1 if (not is_obstructed_white) and (not is_obstructed_hole) else 0
                confidence = self.is_visible(white_ball_pos, hole_pos, ball_pos)

                score = confidence * minimal_condition
                print("Score ",score)
                if score >= best_score:
                    best_score = score
                    best_pair = (ball_label, hole_pos)
                    straight_shot = 1
        return straight_shot, best_pair


    # Example usage:
    # ball_positions is a dictionary containing all ball positions
    # hole_locations is a list of hole positions
    # ball_radius is the radius of the balls
    # best_shot = select_best_shot(ball_positions, hole_locations, ball_radius)
    # print("Best shot (Ball, Hole):", best_shot)

    def action(self, ball_pos=None):
        print(f"Table config {self.table_config}")
        ## Code you agent here ##
        ## You can access data from config.py for geometry of the table, configuration of the levels, etc.
        ## You are NOT allowed to change the variables of config.py (we will fetch variables from a different file during evaluation)
        ## Do not use any library other than those that are already imported.
        ## Try out different ideas and have fun!
        holes = self.holes        
        white_ball_pos = ball_pos['white']
        new_ball_pos = {ball_label: position for ball_label, position in ball_pos.items() if ball_label != 'white' and ball_label != 0}
        # del ball_pos['white']
        # del ball_pos[0]
        # num_balls = len(list(ball_pos))
        # best_holes = np.array([])
        # distance = np.array([])
        best_holes = {}
        distance = {}
        print(holes)
        for ball in list(new_ball_pos):
            print(ball)
            possible_holes = self.get_visible_holes(white_ball_pos, holes, new_ball_pos[ball])
            # possible_holes = holes
            # print(ball_pos[ball])
            # best_holes = np.append(best_holes, self.ball_hole_closest(ball_pos[ball], holes)[0])
            # distance = np.append(distance, self.ball_hole_closest(ball_pos[ball], holes)[1])
            # best_holes[ball], distance[ball] = self.ball_hole_closest(new_ball_pos[ball], possible_holes)
            # best_holes[ball - 1], distance[ball - 1] =  self.ball_hole_closest(ball_pos[ball], holes)

        # print(ball_pos)
    # Find the key (ball) with the minimum distance using min function
        straight_shot, (ball_label, hole_pos) = self.select_best_shot(new_ball_pos, white_ball_pos, possible_holes, self.ball_radius)        
        # best_ball_key = min(distance, key=distance.get)
        # best_ball = new_ball_pos[best_ball_key]
        best_hole = hole_pos
        best_ball = new_ball_pos[ball_label]
        print(f"Best ball is {ball_label}")
        # print(f"best hole for {np.argmin(distance) + 1} {int(best_holes[np.argmin(distance)])}")
        # best_hole = holes[best_holes[best_ball_key]]
        print(f"The best hole pos {best_hole}")
        
        # best_ball, best_hole = self.ball_white_closest(new_ball_pos, white_ball_pos, holes)

        direction = self.decide_white_shooting_direction(white_ball_pos, best_ball, best_hole)
        confidence = self.is_visible(white_ball_pos, best_hole, best_ball)

        force = self.decide_force(white_ball_pos, best_ball, best_hole, confidence, straight_shot)
        print(f"Current ball pos {ball_pos}")
        # force = self.decide_force_smart(direction, white_ball_pos, ball_pos, best_hole, best_ball, ball_label, confidence, straight_shot)
        # print(force)
        # return (-0.5, 1)    
        return (direction/math.pi, force)

        # return(0.5, 0.1)